version: 2.1

description: |
  Test, build and deploy Rails apps

orbs:
  code-deploy: circleci/aws-code-deploy@1.0.1
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.6

executors:
  default:
    description: Uses the CircleCI Ruby image and the PostgreSQL Docker image
    parameters:
      ruby-version:
        type: string
      image-options:
        type: string
      postgres-version:
        type: string
      pg-user:
        type: string
      pg-db:
        type: string
      npm-install:
        type: boolean

    docker:
      - image: circleci/ruby:<< parameters.ruby-version >><< parameters.image-options >>
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          PGHOST: localhost
          PGUSER: << parameters.pg-user >>
      - image: postgres:<< parameters.postgres-version >>
        environment:
          POSTGRES_USER: << parameters.pg-user >>
          POSTGRES_DB: << parameters.pg-db >>
          POSTGRES_HOST_AUTH_METHOD: trust

commands:
  yarn-install:
    description: "Install JavaScript dependencies with Yarn"
    steps:
      - restore_cache:
          key: yarn-cache-v1-{{ checksum "yarn.lock" }}
      - run: yarn install --frozen-lockfile
      - save_cache:
          key: yarn-cache-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  bundle-install:
    description: "Install Ruby dependencies with Bundler"
    steps:
      - run: sudo gem update --system
      - run: gem install bundler
      - restore_cache:
          key: gem-cache-v3-{{ checksum "Gemfile.lock" }}
      - run: bundle install --jobs=2 --retry=3 --deployment --path=vendor/bundle
      - save_cache:
          key: gem-cache-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  bundle-package:
    description: "Vendor all gems with bundle package to vendor/cache"
    steps:
      - restore_cache:
          key: bundle-cache-v1-{{ checksum "Gemfile.lock" }}
      - run: bundle package --no-install --all
      - save_cache:
          key: bundle-cache-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/cache

  build-app:
    description: "Build, test and compile assets for a Rails app"
    parameters:
      test-command:
        type: string
      pg-db:
        type: string
      build-assets:
        type: boolean
      npm-install:
        type: boolean
      yarn-install:
        type: boolean
      collect-artifacts:
        type: boolean
    steps:
      - when:
          condition: << parameters.npm-install >>
          steps:
            - run: npm install

      - when:
          condition: << parameters.yarn-install >>
          steps:
            - yarn-install

      - bundle-install

      - when:
          condition: << parameters.pg-db >>
          steps:
            - run: bundle exec rake db:setup

      - when:
          condition: << parameters.build-assets >>
          steps:
            - run: RAILS_ENV=test bundle exec rake assets:precompile
            - persist_to_workspace:
                root: .
                paths:
                  - public

      - run: << parameters.test-command >>

      - when:
          condition: << parameters.collect-artifacts >>
          steps:
            - store_artifacts:
                path: coverage

jobs:
  build:
    description: "Build, test and optionally compile assets for a Rails app"
    parameters:
      ruby-version:
        default: "latest"
        description: Ruby version to use
        type: string
      image-options:
        default: ""
        description: Docker image options to append to the Ruby image tag
        type: string
      postgres-version:
        default: "9.6"
        description: PostgreSQL version to use
        type: string
      pg-user:
        type: string
        default: "pguser"
      pg-db:
        type: string
        default: ""
      test-command:
        type: string
        default: bundle exec ./bin/test
      build-assets:
        default: false
        description: whether we want the assets to be built
        type: boolean
      npm-install:
        default: false
        description: Whether we want to install NPM pacakges or not
        type: boolean
      yarn-install:
        default: false
        description: Install JavaScript dependencies with Yarn
        type: boolean
      collect-artifacts:
        default: false
        description: Whether we want to collect output artifacts
        type: boolean
    executor:
      name: default
      ruby-version: << parameters.ruby-version >>
      image-options: << parameters.image-options >>
      postgres-version: << parameters.postgres-version >>
      pg-user: << parameters.pg-user >>
      pg-db: << parameters.pg-db >>
      npm-install: << parameters.npm-install >>
    steps:
      - checkout
      - build-app:
          test-command: << parameters.test-command >>
          pg-db: << parameters.pg-db >>
          build-assets: << parameters.build-assets >>
          npm-install: << parameters.npm-install >>
          yarn-install: << parameters.yarn-install >>
          collect-artifacts: << parameters.collect-artifacts >>

  push:
    description: "Bundle up the application and assets to CodeDeploy as a revision"
    parameters:
      application-name:
        type: string
      bundle-bucket:
        type: string
      bundle-key:
        type: string
    executor: aws-cli/default
    environment:
      AWS_PAGER: ""
    steps:
      - aws-cli/setup
      - checkout
      - attach_workspace:
          at: .
      - code-deploy/create-application:
          application-name: << parameters.application-name >>
      - code-deploy/push-bundle:
          application-name: << parameters.application-name >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>

  push-ecr:
    description: Build Docker image and push to AWS ECR
    parameters:
      repo:
        type: string
      tag:
        type: string
    executor:
      name: aws-ecr/default
      use-docker-layer-caching: true
    steps:
      - aws-ecr/build-and-push-image:
          repo: << parameters.repo >>
          tag: << parameters.tag >>

  deploy:
    description: "Deploy a bundle using CodeDeploy"
    parameters:
      application-name:
        type: string
      deployment-group:
        type: string
        default: staging
      service-role-arn:
        type: string
      deployment-config:
        type: string
        default: CodeDeployDefault.AllAtOnce
      bundle-bucket:
        type: string
      bundle-key:
        type: string
    executor: aws-cli/default
    environment:
      AWS_PAGER: ""
    steps:
      - aws-cli/setup
      - code-deploy/create-deployment-group:
          application-name: << parameters.application-name >>
          service-role-arn: << parameters.service-role-arn >>
          deployment-config: << parameters.deployment-config >>
          deployment-group: << parameters.deployment-group >>
      - code-deploy/deploy-bundle:
          application-name: << parameters.application-name >>
          bundle-bucket: << parameters.bundle-bucket >>
          bundle-key: << parameters.bundle-key >>
          deployment-config: << parameters.deployment-config >>
          deployment-group: << parameters.deployment-group >>

  deploy-ecs:
    description: Deploy application to AWS ECS
    executor: aws-cli/default
    parameters:
      application-name:
        type: string
      environment:
        type: string
      repo:
        type: string
      tag:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Evaluate task definition template
          command: |
            curl -L https://assets.spyscape.net/circleci-tools/envsubst-1.20-Linux-x86_64 -o envsubst
            chmod +x envsubst
            ./envsubst < apptaskdef.json > apptaskdef-output.json
          environment:
            APP_ENV: << parameters.environment >>
            APP_IMAGE: "${AWS_ECR_ACCOUNT_URL}/<< parameters.repo >>:<< parameters.tag >>"
      - aws-ecs/update-task-definition-from-json:
          task-definition-json: apptaskdef-output.json
      - aws-ecs/update-service:
          cluster-name: << parameters.application-name >>-<< parameters.environment >>
          family: << parameters.application-name >>-<< parameters.environment >>
          service-name: << parameters.application-name >>-<< parameters.environment >>
          skip-task-definition-registration: true
          verify-revision-is-deployed: true
          poll-interval: 10
      - run:
          name: Update parameter store
          command: >
            aws ssm put-parameter
            --name "/<< parameters.environment >>/<< parameters.application-name >>/latest_image"
            --type String
            --overwrite
            --value "${AWS_ECR_ACCOUNT_URL}/<< parameters.repo >>:<< parameters.tag >>"
